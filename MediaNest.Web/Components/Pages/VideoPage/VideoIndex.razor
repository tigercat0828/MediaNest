@page "/video"
@page "/video/search/{SearchText}"
@rendermode InteractiveServer
@attribute [Authorize(Roles="Admin,User")]


<div class="container-fluid">
	<div class="row mb-3">
		<div class="col-11">
			<div class="input-group">
				<button class="btn btn-outline-primary" @onclick="ToggleSelectMode"><i class="bi bi-check-all"></i></button>
				<button class="btn btn-outline-primary" @onclick="() => GetVideosByPage(1)"><i class="bi bi-arrow-counterclockwise"></i></button>
				<button class="btn btn-outline-primary" @onclick="GetRandomComics"><i class="bi bi-shuffle"></i></button>
				<input type="text" class="form-control" placeholder="輸入關鍵字進行搜尋..." @bind-value="SearchText" />
				<button class="btn btn-outline-primary" @onclick="HandleSearch" @onkeydown="OnKeyDown">搜尋</button>
			</div>
		</div>
		<div class="col-1">
			@* <a class="btn btn-success" href="/video/create">新建</a> *@
		</div>
	</div>
	@* ================================================================ *@
	@* pagination *@
	<div class="row mb-1 mt-1">
		<Pagination TotalPages="_totalPage" CurrentPage="_currentPage" OnPageChanged="SetPage" />
	</div>
	@* ================================================================ *@
	<div class="row">
		@if (_videos != null) {
			@foreach (var video in _videos) {
				string link = $"/video/{video.Id}";
				string source = $"/Assets/Videos/{video.Folder}/cover.jpg";
				<ImageCover Link="@link" Title="@video.Title" Source="@source"
							ShowAddButton="_isSelectMode"
							WidthRem="20rem" HeightPx="200px" />
			}
		}
	</div>
	@* ================================================================ *@
	@* pagination *@
	<div class="row mb-1 mt-1">
		<Pagination TotalPages="_totalPage" CurrentPage="_currentPage" OnPageChanged="SetPage" />
	</div>
	@* ================================================================ *@
</div>

@code {
	[Parameter] public string? SearchText {get; set;}
	@inject VideoService VideoService
	private List<Video> _videos = [];

	private int _elementPerPage = 30;
	private int _currentPage;
	private int _totalPage = 1;
	private bool _isSelectMode = false;

	protected override async Task OnInitializedAsync() {
		if (!string.IsNullOrEmpty(SearchText)) {
			await HandleSearch();
		}
		else {
			await GetTotalPage();
			if (_totalPage <= 0) {
				_videos = [];
				return;
			}
			await GetVideosByPage(1);
		}
	}
	private async Task GetTotalPage() {
		//int total = await ComicService.GetCount();
		int total = await VideoService.GetCount();
		_totalPage = (int)Math.Ceiling(total / (float)_elementPerPage);
	}
	private async Task SetPage(int page) {
		_currentPage = page;
		await GetVideosByPage(page);
	}
	private async Task GetVideosByPage(int page) {
		page = Math.Clamp(page, 1, _totalPage);
		_currentPage = page;

		_videos = await VideoService.GetPage(page, _elementPerPage);
	}
	private async Task GetRandomComics() {
		_videos = await VideoService.GetRandomVideos(_elementPerPage);
	}

	private void ToggleSelectMode() {
		_isSelectMode = !_isSelectMode;
	}

	private async Task HandleSearch() {
		if (string.IsNullOrWhiteSpace(SearchText))
			await GetVideosByPage(1);
		else
			_videos = await VideoService.Search(SearchText);
	}

	private async Task OnKeyDown(KeyboardEventArgs e) {
		if (e.Key == "Enter") {
			Console.WriteLine("enter");
			await HandleSearch();
		}
	}
}


