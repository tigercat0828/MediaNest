@page "/account/login"
@using MediaNest.Web.AuthStateProvider
@using MediaNest.Web.Components.Layout
@using Microsoft.AspNetCore.Components.Authorization
@layout EmptyLayout

<div class="container mt-3 p-5">
    <EditForm Model="authRequest" FormName="Login" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <div class="form-group mt-2">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="authRequest.Username" />
        </div>
        <div class="form-group mt-2">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="authRequest.Password" />
        </div>
        <button type="submit" class="btn btn-primary mt-3">Login</button>
        <a href="/account/register" class="btn btn-secondary ms-2 mt-3">Register</a>
    </EditForm>
    @if (isFailed)
    {
        <div class="alert alert-danger mt-2" role="alert">
            @Message
        </div>
    }
</div>

@code {
    private AuthRequest authRequest = new AuthRequest();

    [Inject] public ApiClient ApiClient { get; set; }
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] public AuthenticationStateProvider AuthStateProvider { get; set; }
    private string Message;
    private bool isFailed = false;
    private async Task HandleLogin() {
        var result = await ApiClient.PostAsync<AuthResponse, AuthRequest>("api/account/login", authRequest);
        if (result != null && result.Token != null) {

            // Use CustomAuthenticationStateProvider to set the authentication state
            await ((CustomAuthStateProvider)AuthStateProvider).MarkUserAsAuthenticated(result);
            Navigation.NavigateTo("/");
        }
        else
        {
            isFailed = true;
            Message = "Username and Password not matched.";
        }
    }
}
