@page "/register"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication


<div class="container">
	<div class="row">
		<div class="col-4 offset-4">
			<div class="card card-body mb-3">
				<EditForm FormName="RegisterForm" Model="@Model" OnValidSubmit="Auththenticate">
					<DataAnnotationsValidator />
					<div class="mb-3 text-center flex-column">
						<img src="/images/member.png" style="max-height:5rem;" />
						<h3>Register</h3>
					</div>
					<div class="mb-3">
						<label>Username</label>
						<InputText @bind-Value="Model.Username" class="form-control" />
						<ValidationMessage For="@(() => Model.Username)" />
					</div>
					<div class="mb-3">
						<label>Password</label>
						<InputText @bind-Value="Model.Password" class="form-control" type="password" />
						<ValidationMessage For="@(() => Model.Password)" />
					</div>
					<div class="mb-3">
						<label>Check Password</label>
						<InputText @bind-Value="Model.CheckPassword" class="form-control" type="password" />
						<ValidationMessage For="@(() => Model.CheckPassword)" />
					</div>
					<div class="mb-3 text-center">
						<span class="text-danger">@_errorMessage</span>
					</div>
					<div>
						<button type="submit" class="btn btn-primary">Register</button>
					</div>
				</EditForm>
			</div>
		</div>
	</div>

</div>

@code {
	[CascadingParameter] public HttpContext? HttpContext { get; set; }

	[SupplyParameterFromForm] public RegisterViewModel Model { get; set; } = new();

	[Inject] public AuthService AuthService { get; set; }

	[Inject] public NavigationManager NavigationManager { get; set; }

	// [Inject] IHttpContextAccessor HttpContextAccessor { get; set; }

	private string? _errorMessage;
	private async Task Auththenticate() {
		if(Model.Password != Model.CheckPassword) {
			_errorMessage = "Passwords do not match";
			return;
		}
		AuthResponse response = await AuthService.RegisterAsync(Model.Username, Model.Password);
		if (response.Success) {
			// await HttpContextAccessor.HttpContext!.SignInAsync("Cookies", response.Principal!);
			await HttpContext.SignInAsync(response.Principal);
			NavigationManager.NavigateTo("/");
		}
		else {
			_errorMessage = response.Message;
		}
	}


	public class RegisterViewModel {
		[Required(AllowEmptyStrings = false, ErrorMessage = "Please provide username")]
		public string? Username { get; set; }

		[Required(AllowEmptyStrings = false, ErrorMessage = "Please provide password")]
		public string? Password { get; set; }

		[Required(AllowEmptyStrings = false, ErrorMessage = "Please repeat password")]
		public string? CheckPassword { get; set; }
	}
}
