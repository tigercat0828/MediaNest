@page "/change-password"
@using System.ComponentModel.DataAnnotations

<AuthorizeView Context="change_password">
	<NotAuthorized>
		<AccessDenied />
	</NotAuthorized>
    <Authorized>
        <div class="container mb-3">
			<div class="row">
				<div class="col-4 offset-4">
					<div class="card card-body mb-3">
						<h3>Change Password</h3>
						<EditForm FormName="ChangePasswordForm" Model="@Model" OnValidSubmit="ChangePasswordAction">
							<DataAnnotationsValidator />
							<div class="mb-3">
								<label>Current Password</label>
								<InputText type="password" class="form-control" @bind-Value="Model.OldPassword" />
								<ValidationMessage For="@(() => Model.OldPassword)" />
							</div>
							<div class="mb-3">
								<label>New Password</label>
								<InputText type="password" class="form-control" @bind-Value="Model.NewPassword" />
								<ValidationMessage For="@(() => Model.NewPassword)" />
							</div>
							<div class="mb-3">
								<label>Confirm New Password</label>
								<InputText type="password" class="form-control" @bind-Value="Model.CheckPassword" />
								<ValidationMessage For="@(() => Model.CheckPassword)" />
							</div>
							<div class="mb-3 text-center">
								<span class="text-danger">@_errorMessage</span>
							</div>
							<div>
								<button class="btn btn-success" type="submit">Change Password</button>
							</div>
						</EditForm>
					</div>
				</div>
            </div>
        </div>
    </Authorized>

</AuthorizeView>


@code {
	[SupplyParameterFromForm] ChangePasswordViewModel Model { get; set; } = new();
	[CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }
	@inject AuthService AuthService
	@inject NavigationManager NavigationManager 
	private string _errorMessage;


	private async Task ChangePasswordAction() {

		var authState = await AuthStateTask;
		string username = authState.User.Identity.Name;
		if(Model.NewPassword != Model.CheckPassword) {
			_errorMessage = "New passwords do not match.";
			return;
		}
		await AuthService.ChangePassword(username , Model.OldPassword, Model.NewPassword);
		NavigationManager.NavigateTo("/settings");
	}

	public class ChangePasswordViewModel {
		[Required (AllowEmptyStrings = false, ErrorMessage = "Please provide password.")]
		public string OldPassword { get; set; }
		[Required(AllowEmptyStrings = false, ErrorMessage = "Please provide new password.")]
		public string NewPassword { get; set; }
		[Required(AllowEmptyStrings = false, ErrorMessage = "Repeat new password.")]
		public string CheckPassword { get; set; }
	}
}
