@page "/settings"
@using MediaNest.Shared.Dtos
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin,User,Pending")]
<div class="container">

	<AuthorizeView>
		<Authorized>
			<div class="row mb-3">
				<h3>Function</h3>
				<ul>
					<li>
						<a href="/change-password">Change Password</a>
					</li>
				</ul>
			</div>
			@if (context.User.IsInRole("Admin")) {
				<div class="row">
					@if (_users.Count > 0) {
						<div class="card card-body mb-3">
							<table class="table">
								<thead>
									<tr>
										<th>Username</th>
										<th>Role</th>
										<th>Actions</th>
									</tr>
								</thead>
								<tbody>
									@foreach (var user in _users) {
										<tr>
											<td>@user.Username</td>
											<td>
												<select class="form-select form-select-sm" @bind="user.Role">
													<option value="Pending">Pending</option>
													<option value="User">User</option>
													<option value="Admin">Admin</option>
												</select>
											</td>
											<td>
												<button class="btn btn-sm btn-primary" @onclick="() => UpdateRole(user)">Save</button>
												<button class="btn btn-sm btn-danger" @onclick="() => ShowCheckDeleteButton(user.Username)">Delete</button>
												@if (_showDeleteConfirmForUser == user.Username) {
													<button class="btn btn-sm btn-warning ms-2" @onclick="() => DeleteAccount(user.Username)">Confirm</button>
													<button class="btn btn-sm btn-secondary ms-1" @onclick="CancelDelete">Cancel</button>
												}
											</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					}
				</div>
			}
		</Authorized>
		<NotAuthorized>
			<AccessDenied />
		</NotAuthorized>
	</AuthorizeView>
</div>

@code {
	@inject AuthService AuthService
	[CascadingParameter] private Task<AuthenticationState> _authStateTask { get; set; }
	
	private List<AccountDto> _users = [];
	private string _showDeleteConfirmForUser;

	protected override async Task OnInitializedAsync() {
		var authState = await _authStateTask;
		if (authState.User.IsInRole(Roles.Admin)) {
			_users =  await AuthService.GetAllUserAsync();
		}
	}
	private async Task UpdateRole(AccountDto user) {
		var response = await AuthService.UpdateRoleAsync(user.Username, user.Role);
		if (response.Count > 0) {
			_users = await AuthService.GetAllUserAsync();
			return;
		}
	}
	private void ShowCheckDeleteButton(string username) {
		_showDeleteConfirmForUser = username;
	}
	private void CancelDelete() {
		_showDeleteConfirmForUser = null!;
	}
	private async Task DeleteAccount(string username) {
		var response = await AuthService.DeleteAsync(username);
		if (response.Count > 0) {
			_users = await AuthService.GetAllUserAsync();
			return;
		}
		_showDeleteConfirmForUser = null!;
	}

	
}
