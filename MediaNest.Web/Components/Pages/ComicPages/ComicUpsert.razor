@page "/comic/create"
@page "/comic/edit/{id}"
@using MediaNest.Web.Services
@using MediaNest.Web.Components.Pages.ComicPages.Tools
<AuthorizeView Roles="Admin,User">
    <NotAuthorized>
        <div class="alert alert-info mt-2">
            Please <a href="/account/login">Login</a> first!
        </div>
    </NotAuthorized>

    <Authorized Context="auth">
        <div class="container">
            <div class="row">
                <div class="card card-body mb-3">
                    <EditForm Model="_currentComic" FormName="ComicForm">
                        <DataAnnotationsValidator />
                        @if (_isEditMode) {
                            <h3>Edit Album</h3>
                        }
                        else {
                            <h3>New Album</h3>
                        }
                        <div class="mb-3">
                            <label>Title</label>
                            <InputText class="form-control" @bind-Value="_currentComic.Title" />
                        </div>

                        <button class="btn btn-outline-secondary mb-3" @onclick="ToggleMoreOptionPanel">
                            @(_showMoreOptionPanel ? "Hide Options" : "More Options")
                        </button>
                        @if (_showMoreOptionPanel) {
                            <div class="mb-3">
                                <label>SubTitle</label>
                                <InputText class="form-control" @bind-Value="_currentComic.SubTitle" />
                            </div>

                            <div class="mb-3">
                                <label>Series</label>
                                <InputText class="form-control" @bind-Value="_currentComic.Series" />
                            </div>

                            <div class="mb-3">
                                <label>Author</label>
                                <InputText class="form-control" @bind-Value="_currentComic.Author" />
                            </div>

                            <div class="mb-3">
                                <label>Description</label>
                                <InputText class="form-control" @bind-Value="_currentComic.Description" />
                            </div>

                            <div class="mb-3">
                                <label>Tags</label>
                                <InputText class="form-control" @bind-Value="_tagStr" />
                            </div>

                            <div class="mb-3">
                                <label>Figures</label>
                                <InputText class="form-control" @bind-Value="_characterStr" />
                            </div>

                            <div class="mb-3">
                                <label>Bookmarks</label>
                                <InputText class="form-control" @bind-Value="_bookmarkStr" />
                            </div>

                        }

                        @if (!_isEditMode) {
                            <div class="mb-3">
                                <ComicFileUploader SaveDirectory="@directory" SaveSubFolder="@_currentComic.FolderName" OnUploadButtonPressed="HandleUploadButtonPressed" />
                            </div>
                        }
                        <div>
                            @if (_isUploadButtonPressed || _isEditMode) {
                                <button class="btn btn-success" @onclick="HandleUpsertGame">完成</button>
                            }
                        </div>
                    </EditForm>
                </div>
            </div>
            <div>
                <div class="col mb-2">
                    
                    @if (_selectedImages.Count > 0) {
                        <button class="btn btn-outline-primary mb-2 me-2" @onclick="AddToBookMark">加入書籤</button>
                        <button class="btn btn-outline-danger mb-2 me-2" @onclick="() => { _showConfirmDelete = !_showConfirmDelete; }">
                            刪除選中 (@_selectedImages.Count)
                        </button>
                        @if (_showConfirmDelete){
                            <button class="btn btn-danger mb-2 me-2" @onclick="DeleteSelectedImages">
                                Confirm (@_selectedImages.Count)
                            </button>
                        }
                        
                    }
                    @if (_currentComic.Bookmarks.Count > 1) {
                        <button class="btn btn-outline-danger mb-2 me-2" @onclick="() => { _showConfirmSplit = !_showConfirmSplit; }">拆分</button>
                        @if (_showConfirmSplit) {
                            <button class="btn btn-danger mb-2 me-2" @onclick="SplitComic">Confirm</button>
                        }
                    }
                </div>
            </div>
            <div class="d-flex flex-wrap">
                @for (int i = 0; i < _imageSrcs.Count; i++) {
                    var imgFile = _imageSrcs[i];
                    bool isSelected = _selectedImages.Contains(imgFile);

                    <div class="p-1">
                        <img src="/Assets/Comics/@_currentComic.FolderName/@imgFile?v=@DateTime.Now.Ticks"
                                alt="Page @i"
                                class="comic-img @(isSelected ? "selected" : "")"
                                @onclick="() => ToggleSelect(imgFile)" />
                                 
                    </div>
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    // TODO : uploader with authentication
    [Inject] public ApiClient ApiClient { get; set; }
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] public AuthenticationStateProvider AuthProvider { get; set; }
	[Inject] public WebAppState WebAppState { get; set; }
    [Parameter] public string id { get; set; }

    private string directory => Path.Combine(WebAppState.AssetsFolder, "Comics");
    private bool _isEditMode = false;
    private Comic _currentComic = new();

    private string _tagStr = "";
    private string _characterStr = "";
    private string _bookmarkStr = "";
    private string _oldTitle = "";
    private bool _isUploadButtonPressed = false;

    private bool _showMoreOptionPanel = false;


    // 選中頁面功能
    private HashSet<string> _selectedImages = [];
    private List<string> _imageSrcs = [];
    private bool _showConfirmDelete = false;
    private bool _showConfirmSplit = false;

    protected override async Task OnInitializedAsync() {

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated ?? false) {

            _currentComic.Code = Utility.GenerateSixDigitCode();
            if (id != null) {
                _isEditMode = true;
                _showMoreOptionPanel = true;
                _currentComic = await ApiClient.GetAsync<Comic>($"/api/comic/{id}");
                _tagStr = string.Join(",", _currentComic.Tags);
                _characterStr = string.Join(",", _currentComic.Characters);
                _bookmarkStr = string.Join(",", _currentComic.Bookmarks);
                _oldTitle = _currentComic.Title;
                LoadImageSrcs();
            }
        }
    }

    private async Task HandleUpsertGame() {

        _currentComic.Tags = _tagStr.Split(",", StringSplitOptions.RemoveEmptyEntries).ToList();
        _currentComic.Characters = _characterStr.Split(",", StringSplitOptions.RemoveEmptyEntries).ToList();
        _currentComic.Uploader = ""; 
        if (_isEditMode) {
            string newFolderPath = Path.Combine(WebAppState.AssetsFolder, "Comics", _currentComic.FolderName);
            string oldFolderPath = Path.Combine(WebAppState.AssetsFolder, "Comics", $"{_currentComic.Code[..3]}", $"[{_currentComic.Code}]{_oldTitle}");
            if (oldFolderPath != newFolderPath) Directory.Move(oldFolderPath, newFolderPath);
            await ApiClient.PutAsync<Comic, Comic>($"/api/comic/{id}", _currentComic);
        }
        else {
            await ApiClient.PostAsync<Comic, Comic>("/api/comic", _currentComic);
        }
        Navigation.NavigateTo($"/comic/{_currentComic.Id}");
    }
    private async Task SplitComic(){
        _showConfirmSplit = false;
        Navigation.NavigateTo($"/comic/{_currentComic.Id}");
        var response = await ApiClient.PostAsync<string, Comic>("/api/comic/split", _currentComic);
    }

    private void HandleUploadButtonPressed(bool isPressed) {
        // 當按鈕被按下時更新狀態
        _isUploadButtonPressed = isPressed;
    }
    private void ToggleMoreOptionPanel() {
        _showMoreOptionPanel = !_showMoreOptionPanel;
    }

    void LoadImageSrcs() {
        var folderName = Path.Combine(WebAppState.AssetsFolder, "Comics", _currentComic.FolderName);
        foreach (var path in Directory.GetFiles(folderName)) {
            _imageSrcs.Add(Path.GetFileName(path));
        }
    }

    private void ToggleSelect(string imgFile) {
        if (_selectedImages.Contains(imgFile))
            _selectedImages.Remove(imgFile);
        else
            _selectedImages.Add(imgFile);
    }
    private void DeleteSelectedImages() {
        var folderPath = Path.Combine(WebAppState.AssetsFolder, "Comics", _currentComic.FolderName);


        foreach (var imgFile in _selectedImages.ToList()) {
            string fullPath = Path.Combine(folderPath, imgFile);
            if (File.Exists(fullPath))
                File.Delete(fullPath);

            _imageSrcs.Remove(imgFile);
        }

        _selectedImages.Clear();


        // --- 重新命名剩下的圖片 ---
        var ordered = _imageSrcs.OrderBy(x => x).ToList();
        _imageSrcs.Clear();

        int counter = 1;
        foreach (var oldName in ordered) {
            string ext = Path.GetExtension(oldName); // 例如 ".jpg"
            string newName = $"{counter:D3}{ext}";
            string oldPath = Path.Combine(folderPath, oldName);
            string newPath = Path.Combine(folderPath, newName);

            // 只有在檔名不同時才需要改名
            if (!oldName.Equals(newName, StringComparison.OrdinalIgnoreCase)) {
                if (File.Exists(newPath))
                    File.Delete(newPath); // 避免衝突
                File.Move(oldPath, newPath);
            }

            _imageSrcs.Add(newName);
            counter++;
        }
        StateHasChanged();
    }
    private void AddToBookMark() {
        foreach (var imgFile in _selectedImages) {
            // 取頁碼 (001.jpg → 1)
            string fileName = Path.GetFileNameWithoutExtension(imgFile);
            if (int.TryParse(fileName, out int pageNum)) {
                if (!_currentComic.Bookmarks.Contains(pageNum)) {
                    _currentComic.Bookmarks.Add(pageNum);
                }
            }
        }

        // 排序，確保 bookmark 順序正確
        _currentComic.Bookmarks = _currentComic.Bookmarks.Distinct().OrderBy(x => x).ToList();

        // 更新文字框同步
        _bookmarkStr = string.Join(",", _currentComic.Bookmarks);

        // 清空選中狀態
        _selectedImages.Clear();
        StateHasChanged();
    }

}

<style>
.comic-img {
    width: 9rem;
    cursor: pointer;
    border: 3px solid transparent;
    transition: border 0.2s;
}

.comic-img.selected {
    border: 3px solid red;
}
</style>