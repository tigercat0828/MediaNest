@using MediaNest.Web.Components.Pages.ComicPages.Tools
<div class="container-fluid" style="background-color:darkgray">
    <div class="row">
        <div class="col-md-4 offset-md-4 text-center">
            <div class="btn-group" role="group">

                <button type="button" class="btn btn-primary" @onclick=@(() => SetViewMode(ComicViewMode.Preview))><i class="bi bi-arrow-return-left"></i></button>
                <button type="button" class="btn btn-success" @onclick=@(() => SetPage(0))>&lt;&lt;</button>
                <button type="button" class="btn btn-success" @onclick=PreviousPage>&lt;</button>
                <button type="button" class="btn btn-success" disabled>[ @(CurrentPage + 1) / @TotalPageNum ]</button>
                <button type="button" class="btn btn-success" @onclick=NextPage>&gt;</button>
                <button type="button" class="btn btn-success" @onclick=@(() => SetPage(TotalPageNum - 1))>&gt;&gt;</button>

            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public int TotalPageNum { get; set; }
    [Parameter]
    public int CurrentPage { get; set; }
    [Parameter]
    public ComicViewMode ViewMode { get; set; }

    [Parameter]
    public EventCallback<int> CurrentPageChanged { get; set; }

    [Parameter]
    public EventCallback<ComicViewMode> ViewModeChanged { get; set; }

    async Task NextPage() {
        if (CurrentPage == TotalPageNum - 1) return;
        CurrentPage++;
        await CurrentPageChanged.InvokeAsync(CurrentPage);
    }
    async Task PreviousPage() {
        if (CurrentPage == 0) return;
        CurrentPage--;
        await CurrentPageChanged.InvokeAsync(CurrentPage);
    }
    async Task SetPage(int page) {
        CurrentPage = page;
        await CurrentPageChanged.InvokeAsync(CurrentPage);
    }
    async Task GoPageView(int page) {
        await SetViewMode(ComicViewMode.PageView);
        CurrentPage = page;
        await CurrentPageChanged.InvokeAsync(CurrentPage);
    }
    async Task SetViewMode(ComicViewMode mode) {
        ViewMode = mode;
        await ViewModeChanged.InvokeAsync(ViewMode);
    }
}
