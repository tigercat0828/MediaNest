@inject IWebHostEnvironment WebEnv
@inject NavigationManager NavigationManager

@if (Comic != null) {
    <div class="container-fluid mb-3 border border-secondary rounded p-4">
        <div class="row">
            <div class="col-auto mb-1 mt-1" >
                <img src="/Assets/Comics/@(Comic.FolderName)/001.jpg" style="width: 15rem;"  alt="@Comic.Title">
            </div>

            <div class="col-8">
                <h3 class="mb-3">@Comic.Title</h3>
                
                <h6 sytle="color:blue">@Comic.Code</h6><br/>


                <div class="mb-2 d-flex">
                    <label class="fw-bold me-2" style="width: 5rem;">Author</label>
                    <div>
                        <a href="/comic/search/@Comic.Author" class="badge bg-light text-dark me-1">@Comic.Author</a>
                    </div>
                </div>


                <div class="mb-2 d-flex">
                    <label class="fw-bold me-2" style="width: 5rem;">Series</label>
                    <div>
                        <a href="/comic/search/@Comic.Series" class="badge bg-light text-dark me-1">@Comic.Series</a>
                    </div>
                </div>


                <div class="mb-2 d-flex">
                    <label class="fw-bold me-2" style="width: 5rem;">Figures</label>
                    <div>
                        @foreach (var chars in Comic.Characters) {
                            <a href="/comic/search/@chars" class="badge bg-light text-dark me-1">@chars</a>
                        }
                    </div>
                </div>

                <div class="mb-2 d-flex">
                    <label class="fw-bold me-2" style="width: 5rem;">Tags</label>
                    <div>
                        @foreach (var tag in Comic.Tags) {
                            <a href="/comic/search/@tag" class="badge bg-light text-dark me-1">@tag</a>
                        }
                    </div>
                </div>

                <div class="mb-2 d-flex">
                    <label class="fw-bold me-2" style="width: 5rem;">Marks</label>
                    <div>
                        @foreach (var mark in Comic.Bookmarks) {
                            <a class="badge bg-light text-dark me-1" @onclick="() => OnBookmarkClicked.InvokeAsync(mark)" style="cursor:pointer;">
                                @mark
                            </a>
                        }
                    </div>
                </div>

                

                <div class="mb-4 d-flex">
                    <label class="fw-bold me-2" style="width: 4rem;">Page</label> @PageCount
                </div>

                <div class="mb-3">
                    <a href="/comic/view/@Comic.Id" target="_blank" class="btn btn-outline-success me-3">
                        <i class="bi bi-book"></i> Read
                    </a>
                    <a href="/comic/edit/@Comic.Id" class="btn btn-outline-warning me-3">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                    @*<button class="btn btn-primary me-3" disabled>
                        <i class="bi bi-download"></i> 下載
                    </button> *@
                    <button @onclick=ToggleConfirmationDialog class="btn btn-outline-danger me-3">
                        <i class="bi bi-trash"></i>
                    </button>
                    @if (showConfirmationDialog) {
                        <input @bind="confirmationInput" @bind:event="oninput" class="me-1 border border-danger" style="width:100px" placeholder="delete"  />
                        <button @onclick=ConfirmDelete class="btn btn-outline-danger me-1">
                            <i class="bi bi-check-lg"></i>
                        </button>
                        <button @onclick=CancelDelete class="btn btn-outline-danger me-1">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    }

                    @* <button @onclick=AddToNewSeries class="btn btn-outline-secondary me3"><i class="bi bi-plus-circle"></i></button> *@
                </div>

            </div>
        </div>
    </div>
}
else {
    <Spinner />
}

@code {
    [Parameter] public Comic? Comic { get; set; }
    [Parameter] public int? PageCount { get; set; }   // total Page count
    [Inject] public IToastService Toast { get; set; }
    [Inject] public ApiClient ApiClient { get; set; }

    // 讓父元件接收通知
    [Parameter] public EventCallback<int> OnBookmarkClicked { get; set; }


    private bool showConfirmationDialog = false;

    private string confirmationInput = "";
    private bool IsConfirmationValid => confirmationInput.Trim().ToLower() == "delete";

    private void ToggleConfirmationDialog() {
        showConfirmationDialog = !showConfirmationDialog;
        confirmationInput = ""; // Reset confirmation input when showing dialog
    }
    private async Task ConfirmDelete() {

        if (IsConfirmationValid) {
            await ApiClient.DeleteAsync<string>($"/api/comic/{Comic.Id}");
            string folderName = Path.Combine(AppState.AssetsFolder, "Comics", Comic.FolderName);
            if (Directory.Exists(folderName)) {
                Directory.Delete(folderName, recursive: true);
            }
            NavigationManager.NavigateTo("/comic");    
        }
        showConfirmationDialog = false;
    }

    private void CancelDelete() {
        showConfirmationDialog = false;
    }

    // TODO comic series
    // async Task AddToNewSeries(){
    //     string? seriesStr = await LocalStorage.GetItemAsync<string>("NewComicSeries");
    //     seriesStr += $"{Comic.Id},";
    //     Console.WriteLine($"Series : {seriesStr}");
    //     await LocalStorage.SetItemAsync("NewComicSeries", seriesStr);
    //     ToastService.ShowSuccess($"{Comic.Title} is temporally added to series.");
    // }
}
