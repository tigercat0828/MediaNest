@page "/comic/view/{id}"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin,User")]
@inject NavigationManager NavigationManager
@using MediaNest.Shared.Entities
@using MediaNest.Web.Services

<AuthorizeView Roles="Admin,User">
    <NotAuthorized>
        <div class="alert alert-info mt-2">
            Please <a href="/account/login">Login</a> first!
        </div>
    </NotAuthorized>
    <Authorized>
        @if (currentComic != null) {
            <div class="container">

                <div class="row mt-3">
                    <div class="col-8">
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="/">Home</a></li>
                                <li class="breadcrumb-item"><a href="/comic">Comics</a></li>
                                <li class="breadcrumb-item active" aria-current="page">@currentComic.Code</li>
                            </ol>
                        </nav>
                    </div>
                    <div class="col-4 d-flex justify-content-end">
                        <a class="btn btn-primary me-1" href="/comic/edit/@currentComic.Id">編輯</a>
                    </div>
                </div>

                <div class="row">
                    <h3>@currentComic.Title</h3>
                </div> 
                @*tag*@
                <div class="row mb-4">
                    <div class="col-12">
                        <span class="badge bg-dark">@currentComic.Code</span>
                        <a href= "/comic/search/@currentComic.Series"    class="badge bg-primary me-1">@currentComic.Series</a>
                        <a href= "/comic/search/@currentComic.Author"    class="badge bg-warning me-1">@currentComic.Author</a>
                        @foreach (var chara in currentComic.Characters) {
                            <a href="/comic/search/@chara" class="badge bg-success me-1">@chara</a>
                        }
                        @foreach (var tag in currentComic.Tags) {
                            <a href="/comic/search/@tag" class="badge bg-secondary me-1">@tag</a>
                        }
                    </div>
                </div>
                <div class="row">
                    <PageTitle>@currentComic.Title</PageTitle>
                    @foreach (var image in images) {
                        <img class="img-fluid mb-2" src="/Assets/Comics/@currentComic.Folder/@image" alt="@image" />
                    }
                </div>

            </div>
            @if (doShowEditPanel) {
                <div class="floating-panel">
                    <div class="input-group mb-3">
                        <span class="input-group-text">系列</span>
                        <input type="text" class="form-control" @bind-value="currentComic.Series" >
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">角色</span>
                        <input type="text" class="form-control" @bind-value="charaStr" >
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">Tag</span>
                        <input type="text" class="form-control" @bind-value="tagStr" >
                    </div>
                    <button id="submitButton" class="btn btn-outline-success" @onclick="OnSubmit"><i class="bi bi-check2-circle"></i></button>
                </div>
            }
        }
        else {
            <LoadingSpinner />
        }
        <button id="EditTagBtn" class="btn btn-success" @onclick="ToggleEditPanel" >
            <i class="bi bi-info-circle"></i>
        </button>
        <button id="scrollToTopBtn" class="btn btn-primary" @onclick="ScrollToTop" >
            <i class="bi bi-chevron-bar-up"></i>
        </button>

    </Authorized>
</AuthorizeView>


@code {
    [Parameter] public string id { get; set; }
    [Inject] public AuthenticationStateProvider authProvider { get; set; }
    [Inject] public IJSRuntime JSRuntime { get; set; }
    [Inject] public FileService FileService { get; set; }
    [Inject] public ComicService ComicService { get; set; }
    Comic currentComic;
    List<string> images = [];
    bool doShowDeleteButton = false;
    bool doShowEditPanel = false;
    string charaStr = string.Empty;
    string tagStr = string.Empty;
    string resourceUrl = string.Empty;
    string folderName;
    protected override async Task OnInitializedAsync() {

        var authState = await authProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated ?? false) {

            currentComic = await ComicService.GetComicById(id);
            charaStr = string.Join(',', currentComic.Characters);
            tagStr = string.Join(',', currentComic.Tags);
            resourceUrl = Path.Combine(FileService.AssetsFolder, currentComic.Folder);
            folderName = Path.Combine(FileService.AssetsFolder, "Comics", currentComic.Folder);
            foreach (var path in Directory.GetFiles(folderName)) {
                images.Add(Path.GetFileName(path));
            }
        }

    }

    private void ShowDeleteButton() {
        doShowDeleteButton = !doShowDeleteButton;
    }
    private void ScrollToTop() {
        JSRuntime.InvokeVoidAsync("scrollToTop");
    }
    // private async Task CopyLink() {
    //     await ClipboardService.CopyToClipboard($"Z:/Assets/Comics/{currentComic.Foldername}");
    // }
    private async Task OnSubmit() {

        var newTags = tagStr.Trim().Split(',', StringSplitOptions.RemoveEmptyEntries);
        var newCharacters = charaStr.Trim().Split(',', StringSplitOptions.RemoveEmptyEntries);
        currentComic.Tags = newTags.ToList();
        currentComic.Characters = newCharacters.ToList();
        await ComicService.UpdateComic(id, currentComic);
        StateHasChanged();
    }
    private void ToggleEditPanel()
    {
        doShowEditPanel = !doShowEditPanel;
    }
}

<script>
    window.onscroll = function() {
    var button = document.getElementById("scrollToTopBtn");
    if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
        button.style.display = "block";
    } 
    else {
        button.style.display = "none";
    }
    };

    function scrollToTop() {
    window.scrollTo({ top: 0, behavior: 'smooth' });
    }
</script>
<style>
    .floating-panel {
        position: fixed;
        bottom: 100px;
        right: 20px; /* 調整與輸入框的距離 */
    }

    #scrollToTopBtn {
        position: fixed;
        bottom: 20px;
        right: 80px;
    }

    #EditTagBtn {
        position: fixed;
        bottom: 20px;
        right: 20px; /* 調整與輸入框的距離 */
    }

</style>
